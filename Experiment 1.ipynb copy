{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d88336dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "pd.set_option(\"display.precision\",2)\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c414f109",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>account length</th>\n",
       "      <th>area code</th>\n",
       "      <th>phone number</th>\n",
       "      <th>international plan</th>\n",
       "      <th>voice mail plan</th>\n",
       "      <th>number vmail messages</th>\n",
       "      <th>total day minutes</th>\n",
       "      <th>total day calls</th>\n",
       "      <th>total day charge</th>\n",
       "      <th>total eve minutes</th>\n",
       "      <th>total eve calls</th>\n",
       "      <th>total eve charge</th>\n",
       "      <th>total night minutes</th>\n",
       "      <th>total night calls</th>\n",
       "      <th>total night charge</th>\n",
       "      <th>total intl minutes</th>\n",
       "      <th>total intl calls</th>\n",
       "      <th>total intl charge</th>\n",
       "      <th>customer service calls</th>\n",
       "      <th>churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KS</td>\n",
       "      <td>128</td>\n",
       "      <td>415</td>\n",
       "      <td>382-4657</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>25</td>\n",
       "      <td>265.1</td>\n",
       "      <td>110</td>\n",
       "      <td>45.07</td>\n",
       "      <td>197.4</td>\n",
       "      <td>99</td>\n",
       "      <td>16.78</td>\n",
       "      <td>244.7</td>\n",
       "      <td>91</td>\n",
       "      <td>11.01</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OH</td>\n",
       "      <td>107</td>\n",
       "      <td>415</td>\n",
       "      <td>371-7191</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>26</td>\n",
       "      <td>161.6</td>\n",
       "      <td>123</td>\n",
       "      <td>27.47</td>\n",
       "      <td>195.5</td>\n",
       "      <td>103</td>\n",
       "      <td>16.62</td>\n",
       "      <td>254.4</td>\n",
       "      <td>103</td>\n",
       "      <td>11.45</td>\n",
       "      <td>13.7</td>\n",
       "      <td>3</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NJ</td>\n",
       "      <td>137</td>\n",
       "      <td>415</td>\n",
       "      <td>358-1921</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>243.4</td>\n",
       "      <td>114</td>\n",
       "      <td>41.38</td>\n",
       "      <td>121.2</td>\n",
       "      <td>110</td>\n",
       "      <td>10.30</td>\n",
       "      <td>162.6</td>\n",
       "      <td>104</td>\n",
       "      <td>7.32</td>\n",
       "      <td>12.2</td>\n",
       "      <td>5</td>\n",
       "      <td>3.29</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>OH</td>\n",
       "      <td>84</td>\n",
       "      <td>408</td>\n",
       "      <td>375-9999</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>299.4</td>\n",
       "      <td>71</td>\n",
       "      <td>50.90</td>\n",
       "      <td>61.9</td>\n",
       "      <td>88</td>\n",
       "      <td>5.26</td>\n",
       "      <td>196.9</td>\n",
       "      <td>89</td>\n",
       "      <td>8.86</td>\n",
       "      <td>6.6</td>\n",
       "      <td>7</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>OK</td>\n",
       "      <td>75</td>\n",
       "      <td>415</td>\n",
       "      <td>330-6626</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>166.7</td>\n",
       "      <td>113</td>\n",
       "      <td>28.34</td>\n",
       "      <td>148.3</td>\n",
       "      <td>122</td>\n",
       "      <td>12.61</td>\n",
       "      <td>186.9</td>\n",
       "      <td>121</td>\n",
       "      <td>8.41</td>\n",
       "      <td>10.1</td>\n",
       "      <td>3</td>\n",
       "      <td>2.73</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  state  account length  area code phone number international plan  \\\n",
       "0    KS             128        415     382-4657                 no   \n",
       "1    OH             107        415     371-7191                 no   \n",
       "2    NJ             137        415     358-1921                 no   \n",
       "3    OH              84        408     375-9999                yes   \n",
       "4    OK              75        415     330-6626                yes   \n",
       "\n",
       "  voice mail plan  number vmail messages  total day minutes  total day calls  \\\n",
       "0             yes                     25              265.1              110   \n",
       "1             yes                     26              161.6              123   \n",
       "2              no                      0              243.4              114   \n",
       "3              no                      0              299.4               71   \n",
       "4              no                      0              166.7              113   \n",
       "\n",
       "   total day charge  total eve minutes  total eve calls  total eve charge  \\\n",
       "0             45.07              197.4               99             16.78   \n",
       "1             27.47              195.5              103             16.62   \n",
       "2             41.38              121.2              110             10.30   \n",
       "3             50.90               61.9               88              5.26   \n",
       "4             28.34              148.3              122             12.61   \n",
       "\n",
       "   total night minutes  total night calls  total night charge  \\\n",
       "0                244.7                 91               11.01   \n",
       "1                254.4                103               11.45   \n",
       "2                162.6                104                7.32   \n",
       "3                196.9                 89                8.86   \n",
       "4                186.9                121                8.41   \n",
       "\n",
       "   total intl minutes  total intl calls  total intl charge  \\\n",
       "0                10.0                 3               2.70   \n",
       "1                13.7                 3               3.70   \n",
       "2                12.2                 5               3.29   \n",
       "3                 6.6                 7               1.78   \n",
       "4                10.1                 3               2.73   \n",
       "\n",
       "   customer service calls  churn  \n",
       "0                       1  False  \n",
       "1                       1  False  \n",
       "2                       0  False  \n",
       "3                       2  False  \n",
       "4                       3  False  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('telecom_churn.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e70638cb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3333, 21)\n"
     ]
    }
   ],
   "source": [
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c27d68f",
   "metadata": {},
   "source": [
    "1. There are 3333 records in this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1609f38b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3333 entries, 0 to 3332\n",
      "Data columns (total 21 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   state                   3333 non-null   object \n",
      " 1   account length          3333 non-null   int64  \n",
      " 2   area code               3333 non-null   int64  \n",
      " 3   phone number            3333 non-null   object \n",
      " 4   international plan      3333 non-null   object \n",
      " 5   voice mail plan         3333 non-null   object \n",
      " 6   number vmail messages   3333 non-null   int64  \n",
      " 7   total day minutes       3333 non-null   float64\n",
      " 8   total day calls         3333 non-null   int64  \n",
      " 9   total day charge        3333 non-null   float64\n",
      " 10  total eve minutes       3333 non-null   float64\n",
      " 11  total eve calls         3333 non-null   int64  \n",
      " 12  total eve charge        3333 non-null   float64\n",
      " 13  total night minutes     3333 non-null   float64\n",
      " 14  total night calls       3333 non-null   int64  \n",
      " 15  total night charge      3333 non-null   float64\n",
      " 16  total intl minutes      3333 non-null   float64\n",
      " 17  total intl calls        3333 non-null   int64  \n",
      " 18  total intl charge       3333 non-null   float64\n",
      " 19  customer service calls  3333 non-null   int64  \n",
      " 20  churn                   3333 non-null   bool   \n",
      "dtypes: bool(1), float64(8), int64(8), object(4)\n",
      "memory usage: 524.2+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(df.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93b9a3a",
   "metadata": {},
   "source": [
    "2. There are 21 features in this dataset. State, account lenght, area code, phone number, international plan, voice mail plan, number vmail messages, total day calls, total eve calls, total night calls, total intl calls, and customer service calls are all discrete. Total day minutes, total day charge, total eve minutes, total eve charge, total night minutes, total night charge, total intl minutes, and total intl charge are continuous. Churn is binary."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7713f88a",
   "metadata": {},
   "source": [
    "3. The only feature that I feel is completely irrelevant is phone number since this will be different for each customer. All the other features have potential to be used to answer questions about which customers are retained or not."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d879af3e",
   "metadata": {},
   "source": [
    "4. There are no missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ec7f48cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>account length</th>\n",
       "      <th>area code</th>\n",
       "      <th>number vmail messages</th>\n",
       "      <th>total day minutes</th>\n",
       "      <th>total day calls</th>\n",
       "      <th>total day charge</th>\n",
       "      <th>total eve minutes</th>\n",
       "      <th>total eve calls</th>\n",
       "      <th>total eve charge</th>\n",
       "      <th>total night minutes</th>\n",
       "      <th>total night calls</th>\n",
       "      <th>total night charge</th>\n",
       "      <th>total intl minutes</th>\n",
       "      <th>total intl calls</th>\n",
       "      <th>total intl charge</th>\n",
       "      <th>customer service calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "      <td>3333.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>101.06</td>\n",
       "      <td>437.18</td>\n",
       "      <td>8.10</td>\n",
       "      <td>179.78</td>\n",
       "      <td>100.44</td>\n",
       "      <td>30.56</td>\n",
       "      <td>200.98</td>\n",
       "      <td>100.11</td>\n",
       "      <td>17.08</td>\n",
       "      <td>200.87</td>\n",
       "      <td>100.11</td>\n",
       "      <td>9.04</td>\n",
       "      <td>10.24</td>\n",
       "      <td>4.48</td>\n",
       "      <td>2.76</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.82</td>\n",
       "      <td>42.37</td>\n",
       "      <td>13.69</td>\n",
       "      <td>54.47</td>\n",
       "      <td>20.07</td>\n",
       "      <td>9.26</td>\n",
       "      <td>50.71</td>\n",
       "      <td>19.92</td>\n",
       "      <td>4.31</td>\n",
       "      <td>50.57</td>\n",
       "      <td>19.57</td>\n",
       "      <td>2.28</td>\n",
       "      <td>2.79</td>\n",
       "      <td>2.46</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00</td>\n",
       "      <td>408.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>23.20</td>\n",
       "      <td>33.00</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>74.00</td>\n",
       "      <td>408.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>143.70</td>\n",
       "      <td>87.00</td>\n",
       "      <td>24.43</td>\n",
       "      <td>166.60</td>\n",
       "      <td>87.00</td>\n",
       "      <td>14.16</td>\n",
       "      <td>167.00</td>\n",
       "      <td>87.00</td>\n",
       "      <td>7.52</td>\n",
       "      <td>8.50</td>\n",
       "      <td>3.00</td>\n",
       "      <td>2.30</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>101.00</td>\n",
       "      <td>415.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>179.40</td>\n",
       "      <td>101.00</td>\n",
       "      <td>30.50</td>\n",
       "      <td>201.40</td>\n",
       "      <td>100.00</td>\n",
       "      <td>17.12</td>\n",
       "      <td>201.20</td>\n",
       "      <td>100.00</td>\n",
       "      <td>9.05</td>\n",
       "      <td>10.30</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.78</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>127.00</td>\n",
       "      <td>510.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>216.40</td>\n",
       "      <td>114.00</td>\n",
       "      <td>36.79</td>\n",
       "      <td>235.30</td>\n",
       "      <td>114.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>235.30</td>\n",
       "      <td>113.00</td>\n",
       "      <td>10.59</td>\n",
       "      <td>12.10</td>\n",
       "      <td>6.00</td>\n",
       "      <td>3.27</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.00</td>\n",
       "      <td>510.00</td>\n",
       "      <td>51.00</td>\n",
       "      <td>350.80</td>\n",
       "      <td>165.00</td>\n",
       "      <td>59.64</td>\n",
       "      <td>363.70</td>\n",
       "      <td>170.00</td>\n",
       "      <td>30.91</td>\n",
       "      <td>395.00</td>\n",
       "      <td>175.00</td>\n",
       "      <td>17.77</td>\n",
       "      <td>20.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>5.40</td>\n",
       "      <td>9.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       account length  area code  number vmail messages  total day minutes  \\\n",
       "count         3333.00    3333.00                3333.00            3333.00   \n",
       "mean           101.06     437.18                   8.10             179.78   \n",
       "std             39.82      42.37                  13.69              54.47   \n",
       "min              1.00     408.00                   0.00               0.00   \n",
       "25%             74.00     408.00                   0.00             143.70   \n",
       "50%            101.00     415.00                   0.00             179.40   \n",
       "75%            127.00     510.00                  20.00             216.40   \n",
       "max            243.00     510.00                  51.00             350.80   \n",
       "\n",
       "       total day calls  total day charge  total eve minutes  total eve calls  \\\n",
       "count          3333.00           3333.00            3333.00          3333.00   \n",
       "mean            100.44             30.56             200.98           100.11   \n",
       "std              20.07              9.26              50.71            19.92   \n",
       "min               0.00              0.00               0.00             0.00   \n",
       "25%              87.00             24.43             166.60            87.00   \n",
       "50%             101.00             30.50             201.40           100.00   \n",
       "75%             114.00             36.79             235.30           114.00   \n",
       "max             165.00             59.64             363.70           170.00   \n",
       "\n",
       "       total eve charge  total night minutes  total night calls  \\\n",
       "count           3333.00              3333.00            3333.00   \n",
       "mean              17.08               200.87             100.11   \n",
       "std                4.31                50.57              19.57   \n",
       "min                0.00                23.20              33.00   \n",
       "25%               14.16               167.00              87.00   \n",
       "50%               17.12               201.20             100.00   \n",
       "75%               20.00               235.30             113.00   \n",
       "max               30.91               395.00             175.00   \n",
       "\n",
       "       total night charge  total intl minutes  total intl calls  \\\n",
       "count             3333.00             3333.00           3333.00   \n",
       "mean                 9.04               10.24              4.48   \n",
       "std                  2.28                2.79              2.46   \n",
       "min                  1.04                0.00              0.00   \n",
       "25%                  7.52                8.50              3.00   \n",
       "50%                  9.05               10.30              4.00   \n",
       "75%                 10.59               12.10              6.00   \n",
       "max                 17.77               20.00             20.00   \n",
       "\n",
       "       total intl charge  customer service calls  \n",
       "count            3333.00                 3333.00  \n",
       "mean                2.76                    1.56  \n",
       "std                 0.75                    1.32  \n",
       "min                 0.00                    0.00  \n",
       "25%                 2.30                    1.00  \n",
       "50%                 2.78                    1.00  \n",
       "75%                 3.27                    2.00  \n",
       "max                 5.40                    9.00  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fadca2de",
   "metadata": {},
   "source": [
    "5. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d32901e5",
   "metadata": {},
   "source": [
    "6. Customers make an average of 1.56 customer service calls."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "13ad22ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "state                       51\n",
       "account length             212\n",
       "area code                    3\n",
       "phone number              3333\n",
       "international plan           2\n",
       "voice mail plan              2\n",
       "number vmail messages       46\n",
       "total day minutes         1667\n",
       "total day calls            119\n",
       "total day charge          1667\n",
       "total eve minutes         1611\n",
       "total eve calls            123\n",
       "total eve charge          1440\n",
       "total night minutes       1591\n",
       "total night calls          120\n",
       "total night charge         933\n",
       "total intl minutes         162\n",
       "total intl calls            21\n",
       "total intl charge          162\n",
       "customer service calls      10\n",
       "churn                        2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e4a68c16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WV    106\n",
       "MN     84\n",
       "NY     83\n",
       "AL     80\n",
       "WI     78\n",
       "OH     78\n",
       "OR     78\n",
       "WY     77\n",
       "VA     77\n",
       "CT     74\n",
       "MI     73\n",
       "ID     73\n",
       "VT     73\n",
       "TX     72\n",
       "UT     72\n",
       "IN     71\n",
       "MD     70\n",
       "KS     70\n",
       "NC     68\n",
       "NJ     68\n",
       "MT     68\n",
       "CO     66\n",
       "NV     66\n",
       "WA     66\n",
       "RI     65\n",
       "MA     65\n",
       "MS     65\n",
       "AZ     64\n",
       "FL     63\n",
       "MO     63\n",
       "NM     62\n",
       "ME     62\n",
       "ND     62\n",
       "NE     61\n",
       "OK     61\n",
       "DE     61\n",
       "SC     60\n",
       "SD     60\n",
       "KY     59\n",
       "IL     58\n",
       "NH     56\n",
       "AR     55\n",
       "GA     54\n",
       "DC     54\n",
       "HI     53\n",
       "TN     53\n",
       "AK     52\n",
       "LA     51\n",
       "PA     45\n",
       "IA     44\n",
       "CA     34\n",
       "Name: state, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['state'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cbf4a39",
   "metadata": {},
   "source": [
    "7. Our data comes from all 50 U.S. states as well as the District of Columbia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8676d446",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    0.86\n",
       "True     0.14\n",
       "Name: churn, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['churn'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bd6889c",
   "metadata": {},
   "source": [
    "8. The distribution of \"Churn\" is skewed towards Churn = False with 86% while Churn = True only has 14%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4cb7558d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>account length</th>\n",
       "      <th>area code</th>\n",
       "      <th>phone number</th>\n",
       "      <th>international plan</th>\n",
       "      <th>voice mail plan</th>\n",
       "      <th>number vmail messages</th>\n",
       "      <th>total day minutes</th>\n",
       "      <th>total day calls</th>\n",
       "      <th>total day charge</th>\n",
       "      <th>total eve minutes</th>\n",
       "      <th>total eve calls</th>\n",
       "      <th>total eve charge</th>\n",
       "      <th>total night minutes</th>\n",
       "      <th>total night calls</th>\n",
       "      <th>total night charge</th>\n",
       "      <th>total intl minutes</th>\n",
       "      <th>total intl calls</th>\n",
       "      <th>total intl charge</th>\n",
       "      <th>customer service calls</th>\n",
       "      <th>churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>CO</td>\n",
       "      <td>154</td>\n",
       "      <td>415</td>\n",
       "      <td>343-5709</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>350.8</td>\n",
       "      <td>75</td>\n",
       "      <td>59.64</td>\n",
       "      <td>216.5</td>\n",
       "      <td>94</td>\n",
       "      <td>18.40</td>\n",
       "      <td>253.9</td>\n",
       "      <td>100</td>\n",
       "      <td>11.43</td>\n",
       "      <td>10.1</td>\n",
       "      <td>9</td>\n",
       "      <td>2.73</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>NY</td>\n",
       "      <td>64</td>\n",
       "      <td>415</td>\n",
       "      <td>345-9140</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>346.8</td>\n",
       "      <td>55</td>\n",
       "      <td>58.96</td>\n",
       "      <td>249.5</td>\n",
       "      <td>79</td>\n",
       "      <td>21.21</td>\n",
       "      <td>275.4</td>\n",
       "      <td>102</td>\n",
       "      <td>12.39</td>\n",
       "      <td>13.3</td>\n",
       "      <td>9</td>\n",
       "      <td>3.59</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2594</th>\n",
       "      <td>OH</td>\n",
       "      <td>115</td>\n",
       "      <td>510</td>\n",
       "      <td>348-1163</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>345.3</td>\n",
       "      <td>81</td>\n",
       "      <td>58.70</td>\n",
       "      <td>203.4</td>\n",
       "      <td>106</td>\n",
       "      <td>17.29</td>\n",
       "      <td>217.5</td>\n",
       "      <td>107</td>\n",
       "      <td>9.79</td>\n",
       "      <td>11.8</td>\n",
       "      <td>8</td>\n",
       "      <td>3.19</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>OH</td>\n",
       "      <td>83</td>\n",
       "      <td>415</td>\n",
       "      <td>370-9116</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>337.4</td>\n",
       "      <td>120</td>\n",
       "      <td>57.36</td>\n",
       "      <td>227.4</td>\n",
       "      <td>116</td>\n",
       "      <td>19.33</td>\n",
       "      <td>153.9</td>\n",
       "      <td>114</td>\n",
       "      <td>6.93</td>\n",
       "      <td>15.8</td>\n",
       "      <td>7</td>\n",
       "      <td>4.27</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>605</th>\n",
       "      <td>MO</td>\n",
       "      <td>112</td>\n",
       "      <td>415</td>\n",
       "      <td>373-2053</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>335.5</td>\n",
       "      <td>77</td>\n",
       "      <td>57.04</td>\n",
       "      <td>212.5</td>\n",
       "      <td>109</td>\n",
       "      <td>18.06</td>\n",
       "      <td>265.0</td>\n",
       "      <td>132</td>\n",
       "      <td>11.93</td>\n",
       "      <td>12.7</td>\n",
       "      <td>8</td>\n",
       "      <td>3.43</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>DE</td>\n",
       "      <td>129</td>\n",
       "      <td>510</td>\n",
       "      <td>332-6181</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>334.3</td>\n",
       "      <td>118</td>\n",
       "      <td>56.83</td>\n",
       "      <td>192.1</td>\n",
       "      <td>104</td>\n",
       "      <td>16.33</td>\n",
       "      <td>191.0</td>\n",
       "      <td>83</td>\n",
       "      <td>8.59</td>\n",
       "      <td>10.4</td>\n",
       "      <td>6</td>\n",
       "      <td>2.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>NY</td>\n",
       "      <td>161</td>\n",
       "      <td>415</td>\n",
       "      <td>351-7269</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>332.9</td>\n",
       "      <td>67</td>\n",
       "      <td>56.59</td>\n",
       "      <td>317.8</td>\n",
       "      <td>97</td>\n",
       "      <td>27.01</td>\n",
       "      <td>160.6</td>\n",
       "      <td>128</td>\n",
       "      <td>7.23</td>\n",
       "      <td>5.4</td>\n",
       "      <td>9</td>\n",
       "      <td>1.46</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>OK</td>\n",
       "      <td>82</td>\n",
       "      <td>510</td>\n",
       "      <td>393-4823</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>329.8</td>\n",
       "      <td>73</td>\n",
       "      <td>56.07</td>\n",
       "      <td>208.3</td>\n",
       "      <td>120</td>\n",
       "      <td>17.71</td>\n",
       "      <td>267.1</td>\n",
       "      <td>102</td>\n",
       "      <td>12.02</td>\n",
       "      <td>10.6</td>\n",
       "      <td>6</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2028</th>\n",
       "      <td>SD</td>\n",
       "      <td>93</td>\n",
       "      <td>510</td>\n",
       "      <td>408-4836</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>328.1</td>\n",
       "      <td>106</td>\n",
       "      <td>55.78</td>\n",
       "      <td>151.7</td>\n",
       "      <td>89</td>\n",
       "      <td>12.89</td>\n",
       "      <td>303.5</td>\n",
       "      <td>114</td>\n",
       "      <td>13.66</td>\n",
       "      <td>8.7</td>\n",
       "      <td>3</td>\n",
       "      <td>2.35</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>TX</td>\n",
       "      <td>208</td>\n",
       "      <td>510</td>\n",
       "      <td>378-3625</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>326.5</td>\n",
       "      <td>67</td>\n",
       "      <td>55.51</td>\n",
       "      <td>176.3</td>\n",
       "      <td>113</td>\n",
       "      <td>14.99</td>\n",
       "      <td>181.7</td>\n",
       "      <td>102</td>\n",
       "      <td>8.18</td>\n",
       "      <td>10.7</td>\n",
       "      <td>6</td>\n",
       "      <td>2.89</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     state  account length  area code phone number international plan  \\\n",
       "365     CO             154        415     343-5709                 no   \n",
       "985     NY              64        415     345-9140                yes   \n",
       "2594    OH             115        510     348-1163                yes   \n",
       "156     OH              83        415     370-9116                 no   \n",
       "605     MO             112        415     373-2053                 no   \n",
       "975     DE             129        510     332-6181                 no   \n",
       "15      NY             161        415     351-7269                 no   \n",
       "1679    OK              82        510     393-4823                 no   \n",
       "2028    SD              93        510     408-4836                 no   \n",
       "197     TX             208        510     378-3625                 no   \n",
       "\n",
       "     voice mail plan  number vmail messages  total day minutes  \\\n",
       "365               no                      0              350.8   \n",
       "985               no                      0              346.8   \n",
       "2594              no                      0              345.3   \n",
       "156               no                      0              337.4   \n",
       "605               no                      0              335.5   \n",
       "975               no                      0              334.3   \n",
       "15                no                      0              332.9   \n",
       "1679              no                      0              329.8   \n",
       "2028              no                      0              328.1   \n",
       "197               no                      0              326.5   \n",
       "\n",
       "      total day calls  total day charge  total eve minutes  total eve calls  \\\n",
       "365                75             59.64              216.5               94   \n",
       "985                55             58.96              249.5               79   \n",
       "2594               81             58.70              203.4              106   \n",
       "156               120             57.36              227.4              116   \n",
       "605                77             57.04              212.5              109   \n",
       "975               118             56.83              192.1              104   \n",
       "15                 67             56.59              317.8               97   \n",
       "1679               73             56.07              208.3              120   \n",
       "2028              106             55.78              151.7               89   \n",
       "197                67             55.51              176.3              113   \n",
       "\n",
       "      total eve charge  total night minutes  total night calls  \\\n",
       "365              18.40                253.9                100   \n",
       "985              21.21                275.4                102   \n",
       "2594             17.29                217.5                107   \n",
       "156              19.33                153.9                114   \n",
       "605              18.06                265.0                132   \n",
       "975              16.33                191.0                 83   \n",
       "15               27.01                160.6                128   \n",
       "1679             17.71                267.1                102   \n",
       "2028             12.89                303.5                114   \n",
       "197              14.99                181.7                102   \n",
       "\n",
       "      total night charge  total intl minutes  total intl calls  \\\n",
       "365                11.43                10.1                 9   \n",
       "985                12.39                13.3                 9   \n",
       "2594                9.79                11.8                 8   \n",
       "156                 6.93                15.8                 7   \n",
       "605                11.93                12.7                 8   \n",
       "975                 8.59                10.4                 6   \n",
       "15                  7.23                 5.4                 9   \n",
       "1679               12.02                10.6                 6   \n",
       "2028               13.66                 8.7                 3   \n",
       "197                 8.18                10.7                 6   \n",
       "\n",
       "      total intl charge  customer service calls  churn  \n",
       "365                2.73                       1   True  \n",
       "985                3.59                       1   True  \n",
       "2594               3.19                       1   True  \n",
       "156                4.27                       0   True  \n",
       "605                3.43                       2   True  \n",
       "975                2.81                       0   True  \n",
       "15                 1.46                       4   True  \n",
       "1679               2.86                       0   True  \n",
       "2028               2.35                       1   True  \n",
       "197                2.89                       2   True  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by='total day charge', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1e34d474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>account length</th>\n",
       "      <th>area code</th>\n",
       "      <th>phone number</th>\n",
       "      <th>international plan</th>\n",
       "      <th>voice mail plan</th>\n",
       "      <th>number vmail messages</th>\n",
       "      <th>total day minutes</th>\n",
       "      <th>total day calls</th>\n",
       "      <th>total day charge</th>\n",
       "      <th>total eve minutes</th>\n",
       "      <th>total eve calls</th>\n",
       "      <th>total eve charge</th>\n",
       "      <th>total night minutes</th>\n",
       "      <th>total night calls</th>\n",
       "      <th>total night charge</th>\n",
       "      <th>total intl minutes</th>\n",
       "      <th>total intl calls</th>\n",
       "      <th>total intl charge</th>\n",
       "      <th>customer service calls</th>\n",
       "      <th>churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1345</th>\n",
       "      <td>SD</td>\n",
       "      <td>98</td>\n",
       "      <td>415</td>\n",
       "      <td>392-2555</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>159.6</td>\n",
       "      <td>130</td>\n",
       "      <td>13.57</td>\n",
       "      <td>167.1</td>\n",
       "      <td>88</td>\n",
       "      <td>7.52</td>\n",
       "      <td>6.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1.84</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1397</th>\n",
       "      <td>VT</td>\n",
       "      <td>101</td>\n",
       "      <td>510</td>\n",
       "      <td>413-7655</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>192.1</td>\n",
       "      <td>119</td>\n",
       "      <td>16.33</td>\n",
       "      <td>168.8</td>\n",
       "      <td>95</td>\n",
       "      <td>7.60</td>\n",
       "      <td>7.2</td>\n",
       "      <td>4</td>\n",
       "      <td>1.94</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2736</th>\n",
       "      <td>OK</td>\n",
       "      <td>127</td>\n",
       "      <td>510</td>\n",
       "      <td>403-1128</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>27</td>\n",
       "      <td>2.6</td>\n",
       "      <td>113</td>\n",
       "      <td>0.44</td>\n",
       "      <td>254.0</td>\n",
       "      <td>102</td>\n",
       "      <td>21.59</td>\n",
       "      <td>242.7</td>\n",
       "      <td>156</td>\n",
       "      <td>10.92</td>\n",
       "      <td>9.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2.48</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2753</th>\n",
       "      <td>OH</td>\n",
       "      <td>134</td>\n",
       "      <td>415</td>\n",
       "      <td>406-4158</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>86</td>\n",
       "      <td>1.33</td>\n",
       "      <td>171.4</td>\n",
       "      <td>100</td>\n",
       "      <td>14.57</td>\n",
       "      <td>186.5</td>\n",
       "      <td>80</td>\n",
       "      <td>8.39</td>\n",
       "      <td>12.9</td>\n",
       "      <td>2</td>\n",
       "      <td>3.48</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1986</th>\n",
       "      <td>WI</td>\n",
       "      <td>70</td>\n",
       "      <td>415</td>\n",
       "      <td>405-9233</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>100</td>\n",
       "      <td>1.34</td>\n",
       "      <td>136.4</td>\n",
       "      <td>83</td>\n",
       "      <td>11.59</td>\n",
       "      <td>156.6</td>\n",
       "      <td>89</td>\n",
       "      <td>7.05</td>\n",
       "      <td>12.1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.27</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1052</th>\n",
       "      <td>OR</td>\n",
       "      <td>98</td>\n",
       "      <td>415</td>\n",
       "      <td>378-6772</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>67</td>\n",
       "      <td>2.13</td>\n",
       "      <td>256.6</td>\n",
       "      <td>90</td>\n",
       "      <td>21.81</td>\n",
       "      <td>169.4</td>\n",
       "      <td>88</td>\n",
       "      <td>7.62</td>\n",
       "      <td>7.7</td>\n",
       "      <td>9</td>\n",
       "      <td>2.08</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>NH</td>\n",
       "      <td>148</td>\n",
       "      <td>408</td>\n",
       "      <td>333-7449</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>17.6</td>\n",
       "      <td>121</td>\n",
       "      <td>2.99</td>\n",
       "      <td>161.7</td>\n",
       "      <td>125</td>\n",
       "      <td>13.74</td>\n",
       "      <td>203.1</td>\n",
       "      <td>82</td>\n",
       "      <td>9.14</td>\n",
       "      <td>10.6</td>\n",
       "      <td>6</td>\n",
       "      <td>2.86</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3046</th>\n",
       "      <td>MI</td>\n",
       "      <td>110</td>\n",
       "      <td>510</td>\n",
       "      <td>357-5784</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>18.9</td>\n",
       "      <td>92</td>\n",
       "      <td>3.21</td>\n",
       "      <td>258.4</td>\n",
       "      <td>81</td>\n",
       "      <td>21.96</td>\n",
       "      <td>109.6</td>\n",
       "      <td>74</td>\n",
       "      <td>4.93</td>\n",
       "      <td>14.8</td>\n",
       "      <td>4</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1621</th>\n",
       "      <td>SC</td>\n",
       "      <td>138</td>\n",
       "      <td>510</td>\n",
       "      <td>370-9533</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>21</td>\n",
       "      <td>19.5</td>\n",
       "      <td>149</td>\n",
       "      <td>3.32</td>\n",
       "      <td>140.9</td>\n",
       "      <td>109</td>\n",
       "      <td>11.98</td>\n",
       "      <td>179.7</td>\n",
       "      <td>111</td>\n",
       "      <td>8.09</td>\n",
       "      <td>7.9</td>\n",
       "      <td>1</td>\n",
       "      <td>2.13</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>WY</td>\n",
       "      <td>53</td>\n",
       "      <td>415</td>\n",
       "      <td>337-4339</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>27</td>\n",
       "      <td>25.9</td>\n",
       "      <td>119</td>\n",
       "      <td>4.40</td>\n",
       "      <td>206.5</td>\n",
       "      <td>96</td>\n",
       "      <td>17.55</td>\n",
       "      <td>228.1</td>\n",
       "      <td>64</td>\n",
       "      <td>10.26</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7</td>\n",
       "      <td>1.76</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     state  account length  area code phone number international plan  \\\n",
       "1345    SD              98        415     392-2555                 no   \n",
       "1397    VT             101        510     413-7655                 no   \n",
       "2736    OK             127        510     403-1128                 no   \n",
       "2753    OH             134        415     406-4158                 no   \n",
       "1986    WI              70        415     405-9233                 no   \n",
       "1052    OR              98        415     378-6772                yes   \n",
       "2252    NH             148        408     333-7449                 no   \n",
       "3046    MI             110        510     357-5784                 no   \n",
       "1621    SC             138        510     370-9533                 no   \n",
       "1076    WY              53        415     337-4339                 no   \n",
       "\n",
       "     voice mail plan  number vmail messages  total day minutes  \\\n",
       "1345              no                      0                0.0   \n",
       "1397              no                      0                0.0   \n",
       "2736             yes                     27                2.6   \n",
       "2753              no                      0                7.8   \n",
       "1986              no                      0                7.9   \n",
       "1052              no                      0               12.5   \n",
       "2252              no                      0               17.6   \n",
       "3046              no                      0               18.9   \n",
       "1621             yes                     21               19.5   \n",
       "1076             yes                     27               25.9   \n",
       "\n",
       "      total day calls  total day charge  total eve minutes  total eve calls  \\\n",
       "1345                0              0.00              159.6              130   \n",
       "1397                0              0.00              192.1              119   \n",
       "2736              113              0.44              254.0              102   \n",
       "2753               86              1.33              171.4              100   \n",
       "1986              100              1.34              136.4               83   \n",
       "1052               67              2.13              256.6               90   \n",
       "2252              121              2.99              161.7              125   \n",
       "3046               92              3.21              258.4               81   \n",
       "1621              149              3.32              140.9              109   \n",
       "1076              119              4.40              206.5               96   \n",
       "\n",
       "      total eve charge  total night minutes  total night calls  \\\n",
       "1345             13.57                167.1                 88   \n",
       "1397             16.33                168.8                 95   \n",
       "2736             21.59                242.7                156   \n",
       "2753             14.57                186.5                 80   \n",
       "1986             11.59                156.6                 89   \n",
       "1052             21.81                169.4                 88   \n",
       "2252             13.74                203.1                 82   \n",
       "3046             21.96                109.6                 74   \n",
       "1621             11.98                179.7                111   \n",
       "1076             17.55                228.1                 64   \n",
       "\n",
       "      total night charge  total intl minutes  total intl calls  \\\n",
       "1345                7.52                 6.8                 1   \n",
       "1397                7.60                 7.2                 4   \n",
       "2736               10.92                 9.2                 5   \n",
       "2753                8.39                12.9                 2   \n",
       "1986                7.05                12.1                 1   \n",
       "1052                7.62                 7.7                 9   \n",
       "2252                9.14                10.6                 6   \n",
       "3046                4.93                14.8                 4   \n",
       "1621                8.09                 7.9                 1   \n",
       "1076               10.26                 6.5                 7   \n",
       "\n",
       "      total intl charge  customer service calls  churn  \n",
       "1345               1.84                       4   True  \n",
       "1397               1.94                       1  False  \n",
       "2736               2.48                       3  False  \n",
       "2753               3.48                       2  False  \n",
       "1986               3.27                       0  False  \n",
       "1052               2.08                       1  False  \n",
       "2252               2.86                       1  False  \n",
       "3046               4.00                       1  False  \n",
       "1621               2.13                       0  False  \n",
       "1076               1.76                       1  False  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by='total day charge').head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0e09bb4",
   "metadata": {},
   "source": [
    "9. The highest total day charge was 59.64 and the lowest was 0. There were significantly more customers that churned out with high day charges compared to those with low day charges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aba5c894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.229813664596273"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['churn'] == True]['customer service calls'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "32b93a42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4498245614035088"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['churn'] == False]['customer service calls'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33d0e139",
   "metadata": {},
   "source": [
    "10. The average number of customer service calls made by those who have churned out is somewhat higher than by those have not but the difference is perhaps lower than one would expect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f328fe8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "account length            102.66\n",
       "area code                 437.82\n",
       "number vmail messages       5.12\n",
       "total day minutes         206.91\n",
       "total day calls           101.34\n",
       "total day charge           35.18\n",
       "total eve minutes         212.41\n",
       "total eve calls           100.56\n",
       "total eve charge           18.05\n",
       "total night minutes       205.23\n",
       "total night calls         100.40\n",
       "total night charge          9.24\n",
       "total intl minutes         10.70\n",
       "total intl calls            4.16\n",
       "total intl charge           2.89\n",
       "customer service calls      2.23\n",
       "churn                       1.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['churn'] == True].mean(numeric_only=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cf396bdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "account length            100.79\n",
       "area code                 437.07\n",
       "number vmail messages       8.60\n",
       "total day minutes         175.18\n",
       "total day calls           100.28\n",
       "total day charge           29.78\n",
       "total eve minutes         199.04\n",
       "total eve calls           100.04\n",
       "total eve charge           16.92\n",
       "total night minutes       200.13\n",
       "total night calls         100.06\n",
       "total night charge          9.01\n",
       "total intl minutes         10.16\n",
       "total intl calls            4.53\n",
       "total intl charge           2.74\n",
       "customer service calls      1.45\n",
       "churn                       0.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['churn'] == False].mean(numeric_only=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e16d856f",
   "metadata": {},
   "source": [
    "11. Generally, the average number of minutes used at any time of day is higher for those who have churned out of the company making the charges higher as well. I don't see any other meaningful differences. I would recommend that this company offers a plan that allows users to use more minutes affordably or offer discounts to customers that use a certain number of minutes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1a3af868",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "churn               False  True \n",
      "international plan              \n",
      "no                   2664    346\n",
      "yes                   186    137\n",
      "precision= 0.8850498338870432\n",
      "recall= 0.9347368421052632\n",
      "accuracy= 0.8403840384038403\n"
     ]
    }
   ],
   "source": [
    "crss_arr = pd.crosstab(df['international plan'], df['churn'])\n",
    "print(crss_arr)\n",
    "crss_arr = crss_arr.values\n",
    "precision = crss_arr[0,0]/np.sum(crss_arr[0,:])\n",
    "recall = crss_arr[0,0]/np.sum(crss_arr[:,0])\n",
    "accuracy = np.sum(crss_arr[0,0]+crss_arr[1,1])/np.sum(crss_arr)\n",
    "\n",
    "print(\"precision=\",precision)\n",
    "print(\"recall=\",recall)\n",
    "print(\"accuracy=\",accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a21c3598",
   "metadata": {},
   "source": [
    "12."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "063f9eda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4241486068111455\n",
      "0.5758513931888545\n",
      "0.11495016611295682\n",
      "0.8850498338870432\n",
      "--------\n",
      "0.2836438923395445 , 0.7163561076604554\n",
      "0.06526315789473684 , 0.9347368421052632\n"
     ]
    }
   ],
   "source": [
    "print(crss_arr[1,1]/np.sum(crss_arr[1,:]))\n",
    "print(crss_arr[1,0]/np.sum(crss_arr[1,:]))\n",
    "print(crss_arr[0,1]/np.sum(crss_arr[0,:]))\n",
    "print(crss_arr[0,0]/np.sum(crss_arr[0,:]))\n",
    "print(\"--------\")\n",
    "print(crss_arr[1,1]/np.sum(crss_arr[:,1]),\",\",crss_arr[0,1]/np.sum(crss_arr[:,1]))\n",
    "print(crss_arr[1,0]/np.sum(crss_arr[:,0]),\",\",crss_arr[0,0]/np.sum(crss_arr[:,0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "981b7655",
   "metadata": {},
   "source": [
    "13. P(churn = True|international plan = yes) = 0.424\n",
    "\n",
    "P(churn = False|international plan = yes) = 0.576\n",
    "\n",
    "P(churn= True|international plan = no) = 0.115\n",
    "\n",
    "P(churn = False|international plan = no) = 0.885\n",
    "\n",
    "P(international plan = yes|churn = True) = 0.284\n",
    "\n",
    "P(international plan = no|churn = True) = 0.716\n",
    "\n",
    "P(international plan = yes|churn = False) = 0.065\n",
    "\n",
    "P(international plan = no|churn = False) = 0.935"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6ecf879d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "churn                   False  True \n",
      "customer service calls              \n",
      "0                         605     92\n",
      "1                        1059    122\n",
      "2                         672     87\n",
      "3                         385     44\n",
      "4                          90     76\n",
      "5                          26     40\n",
      "6                           8     14\n",
      "7                           4      5\n",
      "8                           1      1\n",
      "9                           0      2\n"
     ]
    }
   ],
   "source": [
    "crss_arr1 = pd.crosstab(df['customer service calls'], df['churn'])\n",
    "print(crss_arr1)\n",
    "crss_arr1 = crss_arr1.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e8d0122a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14. P(churn = True|customer service calls = 0) =  0.13199426111908177\n",
      "P(churn = True|customer service calls = 1) =  0.10330228619813717\n",
      "P(churn = True|customer service calls = 2) =  0.11462450592885376\n",
      "P(churn = True|customer service calls = 3) =  0.10256410256410256\n",
      "P(churn = True|customer service calls = 4) =  0.4578313253012048\n",
      "P(churn = True|customer service calls = 5) =  0.6060606060606061\n",
      "P(churn = True|customer service calls = 6) =  0.6363636363636364\n",
      "P(churn = True|customer service calls = 7) =  0.5555555555555556\n",
      "P(churn = True|customer service calls = 8) =  0.5\n",
      "P(churn = True|customer service calls = 9) =  1.0\n"
     ]
    }
   ],
   "source": [
    "print(\"14. P(churn = True|customer service calls = 0) = \", crss_arr1[0,1]/np.sum(crss_arr1[0,:]))\n",
    "print(\"P(churn = True|customer service calls = 1) = \", crss_arr1[1,1]/np.sum(crss_arr1[1,:]))\n",
    "print(\"P(churn = True|customer service calls = 2) = \", crss_arr1[2,1]/np.sum(crss_arr1[2,:]))\n",
    "print(\"P(churn = True|customer service calls = 3) = \", crss_arr1[3,1]/np.sum(crss_arr1[3,:]))\n",
    "print(\"P(churn = True|customer service calls = 4) = \", crss_arr1[4,1]/np.sum(crss_arr1[4,:]))\n",
    "print(\"P(churn = True|customer service calls = 5) = \", crss_arr1[5,1]/np.sum(crss_arr1[5,:]))\n",
    "print(\"P(churn = True|customer service calls = 6) = \", crss_arr1[6,1]/np.sum(crss_arr1[6,:]))\n",
    "print(\"P(churn = True|customer service calls = 7) = \", crss_arr1[7,1]/np.sum(crss_arr1[7,:]))\n",
    "print(\"P(churn = True|customer service calls = 8) = \", crss_arr1[8,1]/np.sum(crss_arr1[8,:]))\n",
    "print(\"P(churn = True|customer service calls = 9) = \", crss_arr1[9,1]/np.sum(crss_arr1[9,:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "875c9605",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame({\n",
    "    'customer service calls': [0,1,2,3,4,5,6,7,8,9],\n",
    "    'probability of customers leaving': [crss_arr1[0,1]/np.sum(crss_arr1[0,:]),\n",
    "                                         crss_arr1[1,1]/np.sum(crss_arr1[1,:]),\n",
    "                                         crss_arr1[2,1]/np.sum(crss_arr1[2,:]),\n",
    "                                         crss_arr1[3,1]/np.sum(crss_arr1[3,:]),\n",
    "                                         crss_arr1[4,1]/np.sum(crss_arr1[4,:]),\n",
    "                                         crss_arr1[5,1]/np.sum(crss_arr1[5,:]),\n",
    "                                         crss_arr1[6,1]/np.sum(crss_arr1[6,:]),\n",
    "                                         crss_arr1[7,1]/np.sum(crss_arr1[7,:]),\n",
    "                                         crss_arr1[8,1]/np.sum(crss_arr1[8,:]),\n",
    "                                         crss_arr1[9,1]/np.sum(crss_arr1[9,:])]\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "71e84655",
   "metadata": {},
   "outputs": [],
   "source": [
    "# some imports to set up plotting \n",
    "import matplotlib.pyplot as plt\n",
    "# pip install seaborn \n",
    "import seaborn as sns\n",
    "# Graphics in retina format are sharper and more legible\n",
    "%config InlineBackend.figure_format = 'retina'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "14f43f52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 432,
       "width": 567
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'customer service calls', y = 'probability of customers leaving', data = df1);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66e6981b",
   "metadata": {},
   "source": [
    "15."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ed7d5df2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['many_service_calls'] = (df['customer service calls'] > 3).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2e73c018",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "churn  False  True \n",
      "row_0              \n",
      "False   2841    464\n",
      "True       9     19\n",
      "precision= 0.8596066565809379\n",
      "recall= 0.9968421052631579\n",
      "accuracy= 0.858085808580858\n"
     ]
    }
   ],
   "source": [
    "crss_arr=pd.crosstab(df['many_service_calls'] & (df['international plan'] == 'yes') , df['churn'])\n",
    "\n",
    "print(crss_arr); crss_arr = crss_arr.values\n",
    "precision = crss_arr[0,0]/np.sum(crss_arr[0,:])\n",
    "recall = crss_arr[0,0]/np.sum(crss_arr[:,0])\n",
    "accuracy = np.sum(crss_arr[0,0]+crss_arr[1,1])/np.sum(crss_arr)\n",
    "\n",
    "print(\"precision=\",precision); print(\"recall=\",recall); print(\"accuracy=\",accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "217eb311",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
